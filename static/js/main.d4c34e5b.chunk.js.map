{"version":3,"sources":["components/Header.tsx","screens/Microwave.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderComponent","props","AppBar","position","Toolbar","Typography","variant","title","MicrowaveComponent","useState","wat","setWat","originWat","setOriginWat","originMinute","setOriginMinute","originSecond","setOriginSecond","convertValue","setConvertValue","useEffect","microwave","localStorage","getItem","Header","TextField","label","type","value","onChange","e","target","onBlur","setItem","Button","color","onClick","wariai","parseInt","result","resultMin","Math","floor","resultSecond","toString","theme","createMuiTheme","palette","primary","main","teal","secondary","orange","App","ThemeProvider","Microwave","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTA0BeA,MAlBf,SAAyBC,GACxB,OACC,kBAACC,EAAA,EAAD,CAAQC,SAAS,UAChB,kBAACC,EAAA,EAAD,KAIC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAGlBL,EAAMM,U,gBCkDGC,MAhEf,WAA+B,IAAD,EACPC,mBAAS,IADF,mBACtBC,EADsB,KACjBC,EADiB,OAEKF,mBAAS,IAFd,mBAEtBG,EAFsB,KAEXC,EAFW,OAGWJ,mBAAS,IAHpB,mBAGtBK,EAHsB,KAGRC,EAHQ,OAIWN,mBAAS,IAJpB,mBAItBO,EAJsB,KAIRC,EAJQ,OAKWR,mBAAS,IALpB,mBAKtBS,EALsB,KAKRC,EALQ,KA+B7B,OAxBAC,qBAAU,WACT,IAAMC,EAAYC,aAAaC,QAAQ,cAAgB,GACvDZ,EAAOU,KACL,IAsBF,8BACC,kBAACG,EAAD,CAAiBjB,MAAM,kEAEvB,iCACC,8BACC,4IACA,kBAACkB,EAAA,EAAD,CAAWC,MAAM,8CAAWC,KAAK,MAAMC,MAAOlB,EAAKmB,SAAU,SAACC,GAAOnB,EAAOmB,EAAEC,OAAOH,QAASI,OAXlG,WACCV,aAAaW,QAAQ,YAAavB,OAahC,8BACC,wGACA,kBAACe,EAAA,EAAD,CAAWC,MAAM,wCAAUC,KAAK,MAAMC,MAAOhB,EAAWiB,SAAU,SAACC,GAAOjB,EAAaiB,EAAEC,OAAOH,UAChG,kBAACH,EAAA,EAAD,CAAWC,MAAM,SAAIC,KAAK,MAAMC,MAAOd,EAAce,SAAU,SAACC,GAAOf,EAAgBe,EAAEC,OAAOH,UAChG,kBAACH,EAAA,EAAD,CAAWC,MAAM,SAAIC,KAAK,MAAMC,MAAOZ,EAAca,SAAU,SAACC,GAAOb,EAAgBa,EAAEC,OAAOH,UAChG,6BACC,kBAACM,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAhC7B,WACC,IAAMC,EAASC,SAAS1B,EAAW,IAAM0B,SAAS5B,EAAK,IAIjD6B,GAF2C,GAA7BD,SAASxB,EAAc,IAAWwB,SAAStB,EAAc,KAEhDqB,EAEvBG,EAAYC,KAAKC,MAAMH,EAAS,IAChCI,EAAeJ,EAAS,GAC9BpB,EAAgB,GAAD,OAAIqB,EAAUI,WAAd,iBAA4BD,EAAaC,WAAzC,aAuBX,+BAKH,iCACC,uDACA,8BAAO1B,MCpDL2B,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAMC,IAAK,MAEbC,UAAW,CACTF,KAAMG,IAAO,SAaJC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAeT,MAAOA,GACpB,kBAACU,EAAD,QCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d4c34e5b.chunk.js","sourcesContent":["import React from \"react\";\n// import styles from \"../styles/Header.module.scss\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\ntype HeaderComponentProps = {\n\ttitle: string;\n}\n\nfunction HeaderComponent(props: HeaderComponentProps) {\n\treturn (\n\t\t<AppBar position=\"static\">\n\t\t\t<Toolbar>\n\t\t\t\t{/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n\t\t\t\t\t<MenuIcon />\n\t\t\t\t</IconButton> */}\n\t\t\t\t<Typography variant=\"h6\"\n\t\t\t\t//  className={classes.title}\n\t\t\t\t >\n\t\t\t\t\t{props.title}\n\t\t\t\t</Typography>\n\t\t\t\t{/* <Button color=\"inherit\">Login</Button> */}\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n}\n\nexport default HeaderComponent;","import React, { useState, useEffect } from \"react\";\nimport HeaderComponent from \"../components/Header\";\nimport { TextField, Button } from \"@material-ui/core\";\n\nfunction MicrowaveComponent() {\n\tconst [wat, setWat] = useState('');\n\tconst [originWat, setOriginWat] = useState('');\n\tconst [originMinute, setOriginMinute] = useState('');\n\tconst [originSecond, setOriginSecond] = useState('');\n\tconst [convertValue, setConvertValue] = useState('');\n\n\tuseEffect(() => {\n\t\tconst microwave = localStorage.getItem('microwave') || '';\n\t\tsetWat(microwave);\n\t}, []);\n\n\t/**\n\t * 計算\n\t */\n\tfunction calcResult() {\n\t\tconst wariai = parseInt(originWat, 10) / parseInt(wat, 10);\n\t\t// console.log('割合: ', wariai);\n\t\tconst motonojikan = parseInt(originMinute, 10) * 60 + parseInt(originSecond, 10);\n\t\t// console.log('元の時間: ', motonojikan);\n\t\tconst result = motonojikan * wariai;\n\t\t// console.log('結果秒: ', result);\n\t\tconst resultMin = Math.floor(result / 60);\n\t\tconst resultSecond = result % 60;\n\t\tsetConvertValue(`${resultMin.toString()}分${resultSecond.toString()}秒`);\n\t}\n\n\tfunction setToStorage() {\n\t\tlocalStorage.setItem('microwave', wat);\n\t}\n\n\treturn (\n\t\t<main>\n\t\t\t<HeaderComponent title=\"電子レンジW変換ツール\" />\n\n\t\t\t<section>\n\t\t\t\t<form>\n\t\t\t\t\t<p>あなたが使用している電子レンジのWは？</p>\n\t\t\t\t\t<TextField label=\"使うレンジのW数\" type=\"tel\" value={wat} onChange={(e) => {setWat(e.target.value)}} onBlur={setToStorage} />\n\t\t\t\t</form>\n\n\t\t\t\t<form>\n\t\t\t\t\t<p>変換したい元のWと時間は？</p>\n\t\t\t\t\t<TextField label=\"変換したいW数\" type=\"tel\" value={originWat} onChange={(e) => {setOriginWat(e.target.value)}} />\n\t\t\t\t\t<TextField label=\"分\" type=\"tel\" value={originMinute} onChange={(e) => {setOriginMinute(e.target.value)}} />\n\t\t\t\t\t<TextField label=\"秒\" type=\"tel\" value={originSecond} onChange={(e) => {setOriginSecond(e.target.value)}} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button color=\"primary\" onClick={calcResult}>変換する</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</section>\n\n\t\t\t<section>\n\t\t\t\t<p>変換結果</p>\n\t\t\t\t<span>{convertValue}</span>\n\t\t\t</section>\n\n\t\t\t{/* <div style={{ padding: 30 }}>\n\t\t\t\t<Button color=\"secondary\">Hello World</Button>\n\t\t\t</div> */}\n\t\t</main>\n\t);\n}\n\nexport default MicrowaveComponent;","import React from 'react';\nimport './App.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport { teal, orange } from '@material-ui/core/colors';\nimport MicrowaveComponent from './screens/Microwave';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: teal[900],\n    },\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MicrowaveComponent />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}